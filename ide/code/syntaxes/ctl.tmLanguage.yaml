$schema: https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json
name: CTL
scopeName: source.ctl
patterns:
  -
    comment: boxed slice literal
    begin: (<)(\[)
    beginCaptures:
      1:
        name: punctuation.brackets.angle.ctl
      2:
        name: punctuation.brackets.square.ctl
    end: '>'
    endCaptures:
      0:
        name: punctuation.brackets.angle.ctl
    patterns:
      - include: '#block-comments'
      - include: '#comments'
      - include: '#gtypes'
      - include: '#lvariables'
      - include: '#punctuation'
      - include: '#types'
  -
    comment: attributes
    name: meta.attribute.ctl
    begin: '(#)(\!?)(\()'
    beginCaptures:
      1:
        name: punctuation.definition.attribute.ctl
      2:
        name: keyword.operator.attribute.inner.ctl
      3:
        name: punctuation.brackets.attribute.ctl
    end: '\)'
    endCaptures:
      0:
        name: punctuation.brackets.attribute.ctl
    patterns:
      - include: '#block-comments'
      - include: '#comments'
      - include: '#keywords'
      - include: '#punctuation'
      - include: '#strings'
      - include: '#gtypes'
      - include: '#types'
  -
    comment: modules
    match: (mod)\s+((?:r#(?!crate|[Tt]his|super))?\p{XID_Start}\p{XID_Continue}*)
    captures:
      1:
        name: storage.type.ctl
      2:
        name: entity.name.module.ctl
  -
    comment: use statements
    name: meta.use.ctl
    begin: \b(use)\s
    beginCaptures:
      1:
        name: keyword.other.ctl
    end: ;
    endCaptures:
      0:
        name: punctuation.semi.ctl
    patterns:
      - include: '#block-comments'
      - include: '#comments'
      - include: '#keywords'
      - include: '#namespaces'
      - include: '#punctuation'
      - include: '#types'
      - include: '#lvariables'
  - include: '#block-comments'
  - include: '#comments'
  - include: '#lvariables'
  - include: '#constants'
  - include: '#gtypes'
  - include: '#functions'
  - include: '#types'
  - include: '#keywords'
  - include: '#macros'
  - include: '#namespaces'
  - include: '#punctuation'
  - include: '#strings'
  - include: '#variables'
repository:
  comments:
    patterns:
      -
        comment: documentation comments
        name: comment.line.documentation.ctl
        match: ^\s*///.*
      -
        comment: line comments
        name: comment.line.double-slash.ctl
        match: \s*//.*
  block-comments:
    patterns:
      -
        comment: empty block comments
        name: comment.block.ctl
        match: /\*\*/
      -
        comment: block documentation comments
        name: comment.block.documentation.ctl
        begin: /\*\*
        end: \*/
        patterns:
          - include: '#block-comments'
      -
        comment: block comments
        name: comment.block.ctl
        begin: /\*(?!\*)
        end: \*/
        patterns:
          - include: '#block-comments'
  constants:
    patterns:
      -
        comment: ALL CAPS constants
        name: constant.other.caps.ctl
        match: \b\p{Uppercase}{2}[A-Z0-9_]*\b
      -
        comment: constant declarations
        match: \b(const)\s+(\p{Uppercase}\p{XID_Continue}*)\b
        captures:
          1:
            name: storage.type.ctl
          2:
            name: constant.other.caps.ctl
      -
        comment: decimal integers and floats
        name: constant.numeric.decimal.ctl
        match: \b\d[\d_]*(\.?)[\d_]*(?:(E)([+-])([\d_]+))?(f32|f64|u\d+|i\d+|u\w*|i\w*)?\b
        captures:
          1:
            name: punctuation.separator.dot.decimal.ctl
          2:
            name: keyword.operator.exponent.ctl
          3:
            name: keyword.operator.exponent.sign.ctl
          4:
            name: constant.numeric.decimal.exponent.mantissa.ctl
          5:
            name: entity.name.type.numeric.ctl
      -
        comment: hexadecimal integers
        name: constant.numeric.hex.ctl
        match: \b0x[\da-fA-F_]+(u\d+|i\d+|u\w*|i\w*)?\b
        captures:
          1:
            name: entity.name.type.numeric.ctl
      -
        comment: octal integers
        name: constant.numeric.oct.ctl
        match: \b0o[0-7_]+(u\d+|i\d+|u\w*|i\w*)?\b
        captures:
          1:
            name: entity.name.type.numeric.ctl
      -
        comment: binary integers
        name: constant.numeric.bin.ctl
        match: \b0b[01_]+(u\d+|i\d+|i\w*|u\w*)?\b
        captures:
          1:
            name: entity.name.type.numeric.ctl
      -
        comment: booleans
        name: constant.language.bool.ctl
        match: \b(true|false)\b
  escapes:
    comment: 'escapes: ASCII, byte, Unicode, quote, regex'
    name: constant.character.escape.ctl
    match: (\\)(?:(?:(x[0-9a-fA-F]{2})|(u(\{)[\da-fA-F]{1,6}(\}))|.))
    captures:
      1:
        name: constant.character.escape.backslash.ctl
      2:
        name: constant.character.escape.bit.ctl
      3:
        name: constant.character.escape.unicode.ctl
      4:
        name: constant.character.escape.unicode.punctuation.ctl
      5:
        name: constant.character.escape.unicode.punctuation.ctl
  functions:
    patterns:
      -
        comment: pub as a function
        match: \b(pub)(\()
        captures:
          1:
            name: keyword.other.ctl
          2:
            name: punctuation.brackets.round.ctl
      -
        comment: function definition
        name: meta.function.definition.ctl
        begin: \b(fn)\s+((?:r#(?!crate|[Tt]his|super))?\p{XID_Continue}+)((\()|(<))
        beginCaptures:
          1:
            name: keyword.other.fn.ctl
          2:
            name: entity.name.function.ctl
          4:
            name: punctuation.brackets.round.ctl
          5:
            name: punctuation.brackets.angle.ctl
        end: \{|;
        endCaptures:
          0:
            name: punctuation.brackets.curly.ctl
        patterns:
          - include: '#block-comments'
          - include: '#comments'
          - include: '#keywords'
          - include: '#lvariables'
          - include: '#constants'
          - include: '#gtypes'
          - include: '#functions'
          - include: '#macros'
          - include: '#namespaces'
          - include: '#punctuation'
          - include: '#strings'
          - include: '#types'
          - include: '#variables'
      -
        # todo: capitalized functions in most cases represent enum members or tuple structs
        # separate these out and color them accordingly
        # this has to be done without breaking struct scoping when the struct keyword is used:
        # struct MyStruct()
        # this currently highlights correctly, even with parens
        comment: function/method calls, chaining
        name: meta.function.call.ctl
        begin: ((?:r#(?!crate|[Tt]his|super))?\p{XID_Continue}+)(\()
        beginCaptures:
          1:
            name: entity.name.function.ctl
          2:
            name: punctuation.brackets.round.ctl
        end: \)
        endCaptures:
          0:
            name: punctuation.brackets.round.ctl
        patterns:
          - include: '#block-comments'
          - include: '#comments'
          - include: '#keywords'
          - include: '#lvariables'
          - include: '#constants'
          - include: '#gtypes'
          - include: '#functions'
          - include: '#macros'
          - include: '#namespaces'
          - include: '#punctuation'
          - include: '#strings'
          - include: '#types'
          - include: '#variables'
      -
        comment: function/method calls with turbofish
        name: meta.function.call.ctl
        begin: ((?:r#(?!crate|[Tt]his|super))?\p{XID_Continue}+)(?=::<.*>\()
        beginCaptures:
          1:
            name: entity.name.function.ctl
        end: \)
        endCaptures:
          0:
            name: punctuation.brackets.round.ctl
        patterns:
          - include: '#block-comments'
          - include: '#comments'
          - include: '#keywords'
          - include: '#lvariables'
          - include: '#constants'
          - include: '#gtypes'
          - include: '#functions'
          - include: '#macros'
          - include: '#namespaces'
          - include: '#punctuation'
          - include: '#strings'
          - include: '#types'
          - include: '#variables'
  keywords:
    patterns:
      -
        comment: control flow keywords
        name: keyword.control.ctl
        match: \b(await|break|continue|do|else|for|if|guard|loop|match|return|defer|try|while|yield)\b
      -
        comment: storage keywords
        name: keyword.other.ctl storage.type.ctl
        match: \b(import|export|extern|let|mod)\b
      -
        comment: const keyword
        name: storage.modifier.ctl
        match: \b(const)\b
      -
        comment: type keyword
        name: keyword.declaration.type.ctl storage.type.ctl
        match: \b(type)\b
      -
        comment: enum keyword
        name: keyword.declaration.enum.ctl storage.type.ctl
        match: \b(enum)\b
      -
        comment: trait keyword
        name: keyword.declaration.trait.ctl storage.type.ctl
        match: \b(trait)\b
      -
        comment: struct keyword
        name: keyword.declaration.struct.ctl storage.type.ctl
        match: \b(struct)\b
      -
        comment: extension keyword
        name: keyword.declaration.extension.ctl storage.type.ctl
        match: \b(extension)\b
      -
        comment: storage modifiers
        name: storage.modifier.ctl
        match: \b(static|shared)\b
      -
        comment: other keywords
        name: keyword.other.ctl
        match: \b(as|async|dyn|move|null|impl|in|is|packed|pub|ref|sealed|typeof|union|unsafe|use|where)\b
      -
        comment: fn
        name: keyword.other.fn.ctl
        match: \bfn\b
      -
        comment: crate
        name: keyword.other.crate.ctl
        match: \bcrate\b
      -
        comment: mut
        name: storage.modifier.mut.ctl
        match: \bmut\b
      -
        comment: raw
        name: storage.modifier.raw.ctl
        match: \braw\b
      -
        comment: keyword
        name: storage.modifier.kw.ctl
        match: \bkw\b
      -
        comment: logical and
        name: keyword.other.and.ctl
        match: \band\b
      -
        comment: logical or
        name: keyword.other.and.ctl
        match: \bor\b
      -
        comment: logical operators
        name: keyword.operator.logical.ctl
        match: (\^|\||<<|>>|!)(?!=)
      -
        comment: logical AND, borrow references
        name: keyword.operator.borrow.and.ctl
        match: '&(?![&=])'
      -
        comment: assignment operators
        name: keyword.operator.assignment.ctl
        match: (\+=|-=|\*=|/=|%=|\^=|&=|\|=|<<=|>>=)
      -
        comment: single equal
        name: keyword.operator.assignment.equal.ctl
        match: '(?<![<>])=(?!=|>)'
      -
        comment: comparison operators
        name: keyword.operator.comparison.ctl
        match: (=(=)?(?!>)|!=|<=|(?<!=)>=)
      -
        comment: math operators
        name: keyword.operator.math.ctl
        match: '(([+%]|(\*(?!\w)))(?!=))|(-(?!>))|(/(?!/))'
      -
        comment: increment
        name: keyword.operator.increment.ctl
        match: (\+\+)
      -
        comment: decrement
        name: keyword.operator.decrement.ctl
        match: (--)
      -
        comment: less than, greater than (special case)
        match: (?:\b|(?:(\))|(\])|(\})))[ \t]+([<>])[ \t]+(?:\b|(?:(\()|(\[)|(\{)))
        captures:
          1:
            name: punctuation.brackets.round.ctl
          2:
            name: punctuation.brackets.square.ctl
          3:
            name: punctuation.brackets.curly.ctl
          4:
            name: keyword.operator.comparison.ctl
          5:
            name: punctuation.brackets.round.ctl
          6:
            name: punctuation.brackets.square.ctl
          7:
            name: punctuation.brackets.curly.ctl
      -
        comment: namespace operator
        name: keyword.operator.namespace.ctl
        match: '::'
      -
        comment: dereference asterisk
        match: (\*)(?=\w+)
        captures:
          1:
            name: keyword.operator.dereference.ctl
      -
        comment: subpattern binding
        name: keyword.operator.subpattern.ctl
        match: '@'
      -
        comment: dot access
        name: keyword.operator.access.dot.ctl
        match: \.(?!\.)
      -
        comment: ranges, range patterns
        name: keyword.operator.range.ctl
        match: \.{2}(=|\.)?
      -
        comment: colon
        name: keyword.operator.key-value.ctl
        match: ':(?!:)'
      -
        comment: fat arrow
        name: keyword.operator.arrow.fat.ctl
        match: =>
      -
        comment: question mark operator, questionably sized, macro kleene matcher
        name: keyword.operator.question.ctl
        match: \?
  interpolations:
    comment: curly brace interpolations
    name: meta.interpolation.ctl
    begin: '(?<=[^\{]|^)((?:\{\{)*)(\{)(?=[^\{])'
    beginCaptures:
      1:
        name: string.quoted.double.ctl
      2:
        name: punctuation.brackets.interpolation.begin.ctl
    end: '\}'
    endCaptures:
      0:
        name: punctuation.brackets.interpolation.end.ct
    patterns:
      - include: '#constants'
      - include: '#functions'
      - include: '#keywords'
      - include: '#namespaces'
      - include: '#types'
      - include: '#gtypes'
      - include: '#punctuation'
      - include: '#strings'
      - include: '#lvariables'
      - include: '#variables'
  namespaces:
    patterns:
      -
        comment: namespace (non-type, non-function path segment)
        match: (?<!\p{XID_Continue})(\p{XID_Continue}+)((?<!super)::)
        captures:
          1:
            name: entity.name.namespace.ctl
          2:
            name: keyword.operator.namespace.ctl
  types:
    patterns:
      -
        comment: numeric types
        match: '(?<![A-Za-z])(f32|f64|u\d+|i\d+|int|uint)\b'
        captures:
          1:
            name: entity.name.type.numeric.ctl
      -
        comment: c types
        match: '\b(c_char|c_uchar|c_short|c_ushort|c_int|c_uint|c_long|c_ulong|c_longlong|c_ulonglong|c_void)\b'
        captures:
          1:
            name: entity.name.type.c.ctl
      -
        comment: parameterized types
        begin: \b(\p{Uppercase}\p{XID_Continue}*)(<)
        beginCaptures:
          1:
            name: entity.name.type.ctl
          2:
            name: punctuation.brackets.angle.ctl
        end: '>'
        endCaptures:
          0:
            name: punctuation.brackets.angle.ctl
        patterns:
          - include: '#block-comments'
          - include: '#comments'
          - include: '#keywords'
          - include: '#lvariables'
          - include: '#punctuation'
          - include: '#types'
          - include: '#variables'
      -
        comment: primitive types
        name: entity.name.type.primitive.ctl
        match: \b(bool|char|str|void|never)\b
      -
        comment: trait declarations
        match: \b(trait)\s+(\p{Uppercase}\p{XID_Continue}*)\b
        captures:
          1:
            name: keyword.declaration.trait.ctl storage.type.ctl
          2:
            name: entity.name.type.trait.ctl
      # todo: add a specific case for struct fields so they can have different scope than variables - make sure not to catch namespaces
      -
        comment: struct declarations
        match: \b(struct)\s+(\p{Uppercase}\p{XID_Continue}*)\b
        captures:
          1:
            name: keyword.declaration.struct.ctl storage.type.ctl
          2:
            name: entity.name.type.struct.ctl
      -
        comment: enum declarations
        match: \b(enum)\s+(\p{Uppercase}\p{XID_Continue}*)\b
        captures:
          1:
            name: keyword.declaration.enum.ctl storage.type.ctl
          2:
            name: entity.name.type.enum.ctl
      -
        comment: type declarations
        match: \b(type)\s+(\p{Uppercase}\p{XID_Continue}*)\b
        captures:
          1:
            name: keyword.declaration.type.ctl storage.type.ctl
          2:
            name: entity.name.type.declaration.ctl
      -
        comment: types
        name: entity.name.type.ctl
        match: '\b\p{Uppercase}\p{XID_Continue}*\b(?!!)'
  gtypes:
    patterns:
      -
        comment: option types
        name: entity.name.type.option.ctl
        match: \b(Some|None)\b
      -
        comment: result types
        name: entity.name.type.result.ctl
        match: \b(Ok|Err)\b
  punctuation:
    patterns:
      -
        comment: comma
        name: punctuation.comma.ctl
        match: ','
      -
        comment: curly braces
        name: punctuation.brackets.curly.ctl
        match: '[{}]'
      -
        comment: parentheses, round brackets
        name: punctuation.brackets.round.ctl
        match: '[()]'
      -
        comment: semicolon
        name: punctuation.semi.ctl
        match: ;
      -
        comment: square brackets
        name: punctuation.brackets.square.ctl
        match: '[\[\]]'
      -
        comment: angle brackets
        name: punctuation.brackets.angle.ctl
        match: '(?<!=)[<>]'
  strings:
    patterns:
      -
        comment: double-quoted strings and byte strings
        name: string.quoted.double.ctl
        begin: '(b?)(")'
        beginCaptures:
          1:
            name: string.quoted.byte.raw.ctl
          2:
            name: punctuation.definition.string.ctl
        end: '"'
        endCaptures:
          0:
            name: punctuation.definition.string.ctl
        patterns:
          - include: '#escapes'
          - include: '#interpolations'
      -
        comment: double-quoted raw strings and raw byte strings
        name: string.quoted.double.ctl
        begin: '(b?r)(#*)(")'
        beginCaptures:
          1:
            name: string.quoted.byte.raw.ctl
          2:
            name: punctuation.definition.string.raw.ctl
          3:
            name: punctuation.definition.string.ctl
        end: '(")(\2)'
        endCaptures:
          1:
            name: punctuation.definition.string.ctl
          2:
            name: punctuation.definition.string.raw.ctl
      -
        comment: characters and bytes
        name: string.quoted.single.char.ctl
        begin: "(b)?(')"
        beginCaptures:
          1:
            name: string.quoted.byte.raw.ctl
          2:
            name: punctuation.definition.char.ctl
        end: "'"
        endCaptures:
          0:
            name: punctuation.definition.char.ctl
        patterns:
          - include: '#escapes'
  lvariables:
    patterns:
      -
        comment: this
        name: variable.language.this.ctl
        match: \b[Tt]his\b
      -
        comment: super
        name: variable.language.super.ctl
        match: \bsuper\b
  variables:
    patterns:
      # In order to capture variables ending ranges, but not struct field access, we match a preceding dot, only if it's preceded by at least one other dot.
      # The double negation states that the pattern "must not be preceded by a dot that is not preceded by a dot."
      # Attempting to match on (\.{2,})? won't work, because then struct field access can match after the dot.
      -
        comment: variables
        name: variable.other.ctl
        match: \b(?<!(?<!\.)\.)(?:r#(?!(crate|[Tt]his|super)))?\p{XID_Continue}+\b
